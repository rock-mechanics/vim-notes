#!/usr/bin/bash

echo -e "flip 1 you get $((~1))"
echo this is due to the way we represent negative numbers.
echo we use 2s compliment for negative numbers

echo "let's say a three bit number"
echo 100 __$((-4))
echo 101 __$((-3))
echo 110 __$((-2))
echo 111 __$((-1))
echo 000 __$((2#000))
echo 001 __$((2#001))
echo 010 __$((2#010))
echo 011 __$((2#011))

cat <<- _eof_

the beauty of doing this is that you don't need to perform minus.
minus is the same as plus with dropping the bit overflow.
_eof_

echo -e "\n"
echo -e "shift the 1 to the left 1 bit = 10, we get  $((1<<1))"
echo -e "shift the 1 to the left 2 bit = 100, we get  $((1<<2))"
echo -e "shift the 1 to the left 3 bit = 1000, we get  $((1<<3))"
echo -e "shift the 1 to the left 4 bit = 10000, we get  $((1<<4))"
echo -e "shift the 1 to the left 5 bit = 100000, we get  $((1<<5))"
echo -e "shift the 1 to the left 6 bit = 1000000, we get  $((1<<6))"

echo -e "\n"
echo "let's do some logical operations"
echo "let's and the following two numbers"
echo -e "\t0101010"
echo -e "\t1010101"
echo we will and those two number the result is $(((2#0101010)&(2#1010101)))
echo we will and or two number the result is $(((2#0101010)|(2#1010101)))
echo we will and xor two number the result is $(((2#0101010)^(2#1010101)))
